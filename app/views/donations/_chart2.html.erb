<div id="chart2">Chart 2</div>

    <script type="text/javascript">

d3.json("donations.json", function (json) {

  var w = 1000,
      h = 500,
      fill = d3.scale.category10();

  var vis = d3.select("div#chart2").append("svg:svg")
      .attr("width", w)
      .attr("height", h);

  // scales the radius of each circle 
  var largest_radius = 30  
      smallest_radius = 3
      largest_amount = d3.max(json, function(d) { return d.amount; })

  var radius = d3.scale.linear()
    .domain([0, largest_amount])
    .range([smallest_radius, largest_radius]);

  // scales the charge of each circle 
  var largest_charge = 150  
      smallest_charge = 7 
      largest_amount = d3.max(json, function(d) { return d.amount; })

  var charge_radius_scale = d3.scale.linear()
    .domain([0, largest_amount])
    .range([smallest_charge, largest_charge]);    

  var charge_food_item_scale = d3.scale.ordinal()      


// getting food types from db and colors from array described in application_helper
var foodTypes = <%= list_of_food_types(@food_types).to_json.html_safe %>
var colors = <%= colors.to_json.html_safe %>

var circle_color = d3.scale.ordinal()
  .domain(foodTypes)
  .range(colors)    


// make a list relating the colors to food items
  vis.selectAll('text')
   .data(foodTypes)
   .enter()
   .append("text")
   .text( function(d) { return d; })
    .attr("x", 5)
    .attr("y", function(d, i) { return i * 15 + largest_radius; })
    .attr("font-family", "sans-serif")
    .attr("font-size", "11px")
    .style("fill", function(d) { return circle_color(d); });      

  var force = d3.layout.force()
      .nodes(json)
      .gravity(0.1)
      .charge(function(d) { return charge_radius_scale(d.amount) * -1; })
      .size([w, h]);

  var force = d3.layout.force()
      .nodes(json)
      .gravity(0.1)
      .charge(function(d) { return charge_radius_scale(d.amount) * -1; })
      .size([w, h]);      

function update(e) {
    var k = 6 * e.alpha;
    json.forEach(function(o, i) {
      o.y += i & 1 ? k : -k;
      o.x += i & 2 ? k : -k;
    });

    vis.selectAll("circle.node")
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
}      

  force.on("tick", update);


  force.start()


  vis.selectAll("circle.node")
      .data(json)
    .enter().append("svg:circle")
      .attr("class", "node")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return radius(d.amount); })
      .style("fill", function(d) { return circle_color(d.food_type); })
      .call(force.drag);

  vis.style("opacity", 1e-6)
    .transition()
      .duration(2000)
      .style("opacity", 1);


  d3.select("div#chart2").on("click", function() {
    json.forEach(function(o, i) {
      o.x += (Math.random() - .5) * 40;
      o.y += (Math.random() - .5) * 40;
    });
    force.resume();
  });      

});

    </script>









