
<!-- <div id='chart-box'>bar graph 1</div> -->

<div id="chart1">Chart 1</div>

<script type="text/javascript">
d3.json("donations.json", function (json) {

var h = 500 // sets the height of the box
var w = 1000 // sets the width of the box

var svg = d3.select("div#chart1").append("svg")
  .attr("class", "chart")
  .attr("width", w )
  .attr("height", h );  

// set variables for the largest and smallest of each scaled attribute
var largest_radius = 75
var smallest_radius = 3
var largest_amount = d3.max(json, function(d) { return d.amount; })
var smallest_time_in_days = d3.min(json, function(d) { return ((d.year * 365) + (d.month * 30) + d.day); })
var largest_time_in_days = d3.max(json, function(d) { return ((d.year * 365) + (d.month * 30) + d.day); })
var approximate_number_of_months = ((largest_time_in_days - smallest_time_in_days)/ 30)

//set a padding variable to show all of the circles on the sides of box with the #s on axis
var foodlistPadding = 120
var xAxisPadding = foodlistPadding + 40 // meaning padding for y axis along the x axis
var yAxisPadding = 40 //padding for x axis along the y axis
var xCirclePadding = largest_radius + xAxisPadding + 5
var yCirclePadding = (largest_radius)
  
// scales the radius of each circle   
var radius = d3.scale.linear()
  .domain([0, largest_amount])
  .range([smallest_radius, largest_radius]);

// scales the height and width of the whole graph
var yScale = d3.scale.linear()
  .domain([0, largest_amount ])
  .range([h - yCirclePadding, yCirclePadding]); // flipping [1, h] to [h, 1] inverts ths scale so large are on top

var xScale = d3.scale.linear()
  .domain([smallest_time_in_days, largest_time_in_days])
  .range([xCirclePadding, w - xCirclePadding]);

// This really needs to be filled out explicitly in a way that adds new foods easily

var foodTypes = <%= list_of_food_types(@food_types).to_json.html_safe %>
var colors = <%= colors.to_json.html_safe %>

var circle_color = d3.scale.ordinal()
  .domain(foodTypes)
  .range(colors)       

  var circle = svg.selectAll('circle')
    .data(json)
    .enter()
      .append('circle')
      .style("fill", function(d) { return circle_color(d.food_type) })
      .attr("cy", function(d) { return yScale(d.amount); })
      .attr("cx", function(d) { return xScale((d.year * 365) + (d.month * 30) + d.day); })
      .attr("r", function(d) { return radius(d.amount); });
 

    circle.style("opacity", 1e-6)
      .transition()
        .duration(1000)
        .style("opacity", 0.9);   

    circle.on("mouseover", function() {
      svg.selectAll('circle').transition()
      .style("opacity", 0.2)   
      .delay(0)
      .duration(500)
      d3.select(this).transition()
        .style("opacity", 1)   
        .delay(250)
        .duration(500)
    });  

    circle.on("mouseout", function() {
      svg.selectAll('circle').transition()
      .style("opacity", 0.9)   
      .delay(0)
      .duration(250)
    });

// make a list relating the colors to food items
  var text = svg.selectAll('text')
   .data(foodTypes)
   .enter()
   .append("text")
   .text( function(d) { return d; })
    .attr("x", 5)
    .attr("y", function(d, i) { return i * 15 + largest_radius; })
    .attr("font-family", "sans-serif")
    .attr("font-size", "11px")
    .style("fill", function(d) { return circle_color(d); });

// Define X axis

dates = <%= dates(@donations).to_json.html_safe %>
function getDate(d) {
    return new Date(d);
}
var minDate = getDate(dates[0])
var maxDate = getDate(dates[dates.length-1])

var scaleXAxis = d3.time.scale()
  .domain([minDate, maxDate])
  .range([xCirclePadding, w - xCirclePadding]);

var xAxis = d3.svg.axis()
  .scale(scaleXAxis)
  .orient("bottom")
  .ticks(5);  

svg.append("g")
    .attr("class", "axis")  //Assign "axis" class
    .attr("transform", "translate(0," + (h - yAxisPadding) + ")") //move to bottom
    .call(xAxis);  

// Define Y axis
var yAxis = d3.svg.axis()
  .scale(yScale)
  .orient("left");

svg.append("g")
  .attr("class", "axis")  //Assign "axis" class
  .attr("transform", "translate(" + xAxisPadding + ", 0)") //move to bottom
  .call(yAxis); 

});

d3.selectAll("circle").on("mouseover", function() {
      d3.select(this).transition()
      .attr("fill", "gray")
      .delay(0)
      .duration(1000)
      .ease("elastic", 10, .3)
    }) 
  

    .on("mouseover", function() {
        d3.select(this).transition()
        .attr("cy", function() { return y2(Math.random()) })
        .delay(0)
        .duration(2000)
        .ease("elastic", 10, .3)
    })  

</script>





















